import io
from django.conf import settings
from scripts.common import start_session, create_file
import json
import csv
import uuid as uuid_lib

from respond.models import DataFile, set_upload_data_file_path

delegation_value_list = [
    'name', 'other_names', 'state__short_name', 'id', 'clues']


def text_normalizer(text):
    import re
    import unidecode
    text = text.upper().strip()
    text = unidecode.unidecode(text)
    return re.sub(r'[^a-zA-Z\s]', '', text)


def field_of_models_all(model_data):
    from django.apps import apps
    from django.db.models import CharField, TextField
    app_name = model_data.get('app', 'formula')
    model_name = model_data['model']
    my_model = apps.get_model(app_name, model_name)
    all_fields = my_model._meta.get_fields(
        include_parents=False, include_hidden=False)
    fields = []
    for field in all_fields:
        if field.one_to_many:
            continue
        complement = "_id" if field.is_relation else ""
        field_name = f"{field.name}{complement}"
        fields.append({
            "name": field_name,
            "is_str": isinstance(field, (CharField, TextField)),
        })
    return fields


class MatchOld:

    def __init__(self, data_file: DataFile):
        from geo.models import Delegation
        from data_param.models import NameColumn
        self.data_file = data_file
        self.lap = self.data_file.next_lap
        petition = data_file.petition_file_control.petition
        self.file_control = data_file.petition_file_control.file_control
        self.agency = petition.agency
        self.institution = self.agency.institution
        self.global_state = self.agency.state
        self.global_clues = self.agency.clues
        self.global_delegation = None
        print("self.institution.code", self.institution.code)
        if self.institution.code == "INSABI":
            print("INSABI")
            if self.global_state:
                delegation_name = f"{self.global_state.short_name} - INSABI"
                self.global_delegation = Delegation.objects\
                    .filter(name=delegation_name).first()
        elif self.global_clues:
            self.global_delegation = self.global_clues.related_delegation
        print("global_delegation", self.global_delegation)
        only_name = f"NEW_ELEM_NAME_{self.data_file.id}_lap{self.lap}.csv"
        self.final_path = set_upload_data_file_path(self.data_file, only_name)
        self.name_columns = NameColumn.objects \
            .filter(file_control=self.file_control) \
            .prefetch_related(
                "final_field",
                "final_field__collection",
                "final_field__parameter_group",
                "column_transformations",
                "column_transformations__clean_function",
            )

        self.catalogs = {}

        self.s3_client = None

        # self.claves_medico_dict = {}
        # self.catalog_clues = {}
        # self.catalog_state = {}

    def build_csv_converted(self, is_prepare=False):

        self.build_all_catalogs()
        return [], [], self.data_file

    def build_all_catalogs(self):
        catalogs = {
            "container": {
                "model2": "medicine:Container",
                "only_unique": True,
                "required": False,
                "value_list": [
                    "name", "presentation__description",
                    "presentation__presentation_type__name",
                    "presentation__component__name"]
            },
            "diagnosis": {
                "model2": "formula:Diagnosis",
                "only_unique": False,
                "required": False,
                "id": "uuid",
                "value_list": ["motive", "cie10", "text"],
            },
            "area": {
                "model2": "geo:Area",
                "only_unique": False,
                "required": False,
                "by_agency": True,
                "id": "uuid",
                "value_list": ["description", "name", "key"],
            },
            "doctor": {
                "model2": "formula:Doctor",
                "only_unique": False,
                "required": False,
                "by_agency": True,
                "id": "uuid",
                "value_list": [
                    "full_name", "professional_license",
                    "clave", "medical_speciality"],
            },
        }
        if not self.global_clues:
            catalogs["clues"] = {
                "model2": "geo:CLUES",
                "only_unique": True,
                "required": True,
                "by_agency": True,
                "value_list": [
                    'name', 'state__short_name', 'typology', 'typology_cve',
                    'jurisdiction', 'atention_level'],
            }
        if not self.global_delegation:
            catalogs["delegation"] = {
                "model2": "geo:Delegation",
                "only_unique": True,
                "required": True,
                "by_agency": True,
                "complement_field": "other_names",
                "value_list": ['name', 'state__short_name', 'clues'],
            }
        for [catalog_name, catalog] in catalogs.items():
            # if geo.get("by_agency", False):
            #     geo["agency"] = self.agency
            dict_file = self.build_catalog(catalog_name, **catalog)
            # file_name = dict_file.file.name if dict_file else None
            # file_name = self.build_catalog(catalog_name, **geo)
            if dict_file:
                self.catalogs[catalog_name] = {
                    "name": catalog_name,
                    "file": dict_file.file.name,
                    "unique_field": dict_file.unique_field.name,
                    "unique_field_id": dict_file.unique_field.id,
                    "collection": dict_file.collection.model_name,
                    "params": catalog,
                }
            elif catalog["required"]:
                print("dict_file", dict_file)
                raise Exception(
                    f"Error al crear el catálogo de {catalog_name}")

    def build_catalog(self, catalog_name, model2, only_unique, **kwargs):

        from django.apps import apps
        [app_name, model_name] = model2.split(":", 1)
        model = apps.get_model(app_name, model_name)
        query_unique = {"final_field__collection__model_name": model_name}
        if only_unique:
            query_unique["final_field__is_unique"] = True
        model_unique = self.name_columns.filter(**query_unique)\
            .order_by('-final_field__is_unique').first()
        if not model_unique:
            return None
        query_dict_file = {"collection": model_unique.final_field.collection,
                           "unique_field": model_unique.final_field}
        # agency = kwargs.get("agency")
        if kwargs.get("by_agency"):
            # query_dict_file["agency"] = self.agency
            query_dict_file["institution"] = self.institution
            if self.global_delegation:
                query_dict_file["delegation"] = self.global_delegation
        # dict_file = DictionaryFile.objects.filter(**query_dict_file).first()
        query_dict_file["file"] = self.build_catalog_by_id(
            model, model_unique.final_field.name, catalog_name, **kwargs)
        # dict_file = DictionaryFile.objects.create(**query_dict_file)

    def build_catalog_by_id(
            self, model, key_field, catalog_name, **kwargs):
        query_filter = {f"{key_field}__isnull": False}
        if kwargs.get("by_agency"):
            query_filter["institution"] = self.institution
            if catalog_name == "clues":
                if self.global_clues:
                    query_filter["clues"] = self.global_clues
                if self.global_state:
                    query_filter["state"] = self.global_state
            elif self.global_delegation:
                query_filter["delegation"] = self.global_delegation
        model_query = model.objects.filter(**query_filter)
        complement_field = kwargs.get("complement_field")
        value_list = kwargs.get("value_list")
        field_id = kwargs.get("id", "id")
        list_values = value_list + [key_field, field_id]
        if complement_field:
            list_values.append(complement_field)
        model_list = list(model_query.values(*list_values))
        catalog_model = {}
        for elem in model_list:
            catalog_model[elem[key_field]] = elem
            if complement_field:
                complement_list = elem[complement_field] or []
                for name in complement_list:
                    if name not in catalog_model:
                        catalog_model[name] = elem
        final_path = f"catalogs/{model.__name__.lower()}_by_{key_field}.json"
        if kwargs.get("by_agency"):
            final_path = f"{self.agency.acronym}/{final_path}"
        # dumb_catalog = json.dumps(catalog_model)
        # file_model, errors = create_file(
        #     dumb_catalog, self.s3_client, final_path=final_path)
        # if errors:
        #     raise Exception(f"Error creando catálogo {catalog_name}: {errors}")
        # return file_model

    # def build_catalog_clues(self):
    #     from data_param.models import DictionaryFile
    #     clues_unique = self.name_columns.filter(
    #         final_field__collection__model_name='CLUES',
    #         final_field__is_unique=True).first()
    #     if not clues_unique:
    #         raise Exception("No se encontró un campo único para CLUES")
    #     dict_file = DictionaryFile.objects.filter(
    #         collection__model_name='CLUES',
    #         agency=self.agency,
    #         unique_field=clues_unique.final_field).first()
    #     if not dict_file:
    #         file_clues, errors = self.build_catalog_clues_by_id(
    #             clues_unique.final_field.name)
    #         if errors:
    #             raise Exception(f"Error al crear el catálogo de CLUES:"
    #                             f" {errors}")
    #         dict_file = DictionaryFile.objects.create(
    #             collection=clues_unique.final_field.collection,
    #             agency=self.agency,
    #             unique_field=clues_unique.final_field,
    #             file=file_clues,
    #         )
    #     return dict_file.file.name
    #
    # def build_catalog_delegation(self):
    #     from data_param.models import DictionaryFile
    #     has_delegation_fields = self.name_columns.filter(
    #         final_field__collection__model_name='Delegation').exists()
    #     if not has_delegation_fields:
    #         raise Exception("No se encontró un campo para construir delegación")
    #     delegation_unique = self.name_columns.filter(
    #         final_field__collection__model_name='Delegation',
    #         final_field__is_unique=True).first()
    #     if not delegation_unique:
    #         raise Exception("No se encontró un campo único para Delegación")
    #     dict_file = DictionaryFile.objects.filter(
    #         collection__model_name='Delegation',
    #         agency=self.agency,
    #         unique_field=delegation_unique.final_field).first()
    #     if not dict_file:
    #         file_delegation, errors = self.build_catalog_delegation_by_id(
    #             delegation_unique.final_field.name)
    #         if errors:
    #             raise Exception(f"Error al crear el catálogo de Delegación:"
    #                             f" {errors}")
    #         dict_file = DictionaryFile.objects.create(
    #             collection=delegation_unique.final_field.collection,
    #             agency=self.agency,
    #             unique_field=delegation_unique.final_field,
    #             file=file_delegation,
    #         )
    #     return dict_file.file.name
    #
    # def build_catalog_delegation_by_id(self, key_field='name'):
    #     from geo.models import Delegation
    #     curr_delegations = Delegation.objects.filter(institution=self.institution)
    #     if self.global_state:
    #         curr_delegations = curr_delegations.filter(state=self.global_state)
    #     delegations_query = list(curr_delegations.values(*delegation_value_list))
    #     catalog_delegation = {}
    #     for delegation in delegations_query:
    #         delegation_name = text_normalizer(delegation[key_field])
    #         if delegation_name not in catalog_delegation:
    #             catalog_delegation[delegation_name] = delegation
    #         alt_names = delegation["other_names"] or []
    #         for alt_name in alt_names:
    #             alt_name = text_normalizer(alt_name)
    #             if alt_name not in catalog_delegation:
    #                 catalog_delegation[alt_name] = delegation
    #     final_path = f"{self.agency.acronym}/catalogs/delegation_by_{key_field}.json"
    #     file_name, errors = create_file(
    #         catalog_delegation, self.s3_client, final_path=final_path)
    #     return file_name, errors
    #
    # def build_catalog_clues_by_id(self, key_field):
    #     from geo.models import CLUES
    #     clues_data_query = CLUES.objects.filter(institution=self.institution)
    #     if self.global_state:
    #         clues_data_query.filter(state=self.global_state)
    #     value_list = ["id", key_field]
    #     clues_data_list = list(clues_data_query.values(*value_list))
    #     catalog_clues = {}
    #     for clues_data in clues_data_list:
    #         clues_key = clues_data[key_field]
    #         catalog_clues[clues_key] = clues_data["id"]
    #     final_path = f"{self.agency.acronym}/catalogs/clues_by_{key_field}.json"
    #     file_name, errors = create_file(
    #         catalog_clues, self.s3_client, final_path=final_path)
    #     return file_name, errors
    #
    # def build_catalog_container(self):
    #     from data_param.models import DictionaryFile
    #     container_unique = self.name_columns.filter(
    #         final_field__collection__model_name='Container',
    #         final_field__is_unique=True).first()
    #     if not container_unique:
    #         return None
    #     dict_file = DictionaryFile.objects.filter(
    #         collection__model_name='Container',
    #         unique_field=container_unique.final_field).first()
    #     if not dict_file:
    #         file_container, errors = self.build_catalog_container_by_id(
    #             container_unique.final_field.name)
    #         if errors:
    #             raise Exception(f"Error al crear el catálogo de Medicamentos aceptable:"
    #                             f" {errors}")
    #         dict_file = DictionaryFile.objects.create(
    #             collection=container_unique.final_field.collection,
    #             unique_field=container_unique.final_field,
    #             file=file_container,
    #         )
    #     return dict_file.file.name
    #
    # def build_catalog_container_by_id(self, key_field):
    #     from medicine.models import Container
    #     query_filter = {f"{key_field}__isnull": False}
    #     containers_query = Container.objects.filter(**query_filter)
    #     containers_list = list(containers_query.values("id", key_field))
    #     catalog_container = {}
    #     for container in containers_list:
    #         catalog_container[container[key_field]] = container["id"]
    #     final_path = f"catalogs/container_by_{key_field}.json"
    #     # return file_name, errors
    #     return create_file(
    #         catalog_container, self.s3_client, final_path=final_path)
    #
    # def build_catalog_diagnosis(self):
    #     from data_param.models import DictionaryFile
    #     diagnosis_unique = self.name_columns.filter(
    #         final_field__collection__model_name='Diagnosis',
    #         final_field__is_unique=True).first()
    #     if not diagnosis_unique:
    #         diagnosis_unique = self.name_columns.filter(
    #             final_field__collection__model_name='Diagnosis').first()
    #     if not diagnosis_unique:
    #         return False
    #     dict_file = DictionaryFile.objects.filter(
    #         collection__model_name='Diagnosis',
    #         unique_field=diagnosis_unique.final_field).first()
    #     if not dict_file:
    #         file_diagnosis, errors = self.build_catalog_diagnosis_by_id(
    #             diagnosis_unique.final_field.name)
    #         if errors:
    #             raise Exception(f"Error al crear el catálogo de Diagnóstico:"
    #                             f" {errors}")
    #         dict_file = DictionaryFile.objects.create(
    #             collection=diagnosis_unique.final_field.collection,
    #             unique_field=diagnosis_unique.final_field,
    #             file=file_diagnosis,
    #         )
    #     return dict_file.file.name
    #
    # def build_catalog_diagnosis_by_id(self, key_field):
    #     from formula.models import Diagnosis
    #     query_filter = {f"{key_field}__isnull": False}
    #     diagnosis_query = Diagnosis.objects.filter(**query_filter)
    #     diagnosis_list = list(diagnosis_query.values("id", key_field))
    #     catalog_diagnosis = {diagnosis[key_field]: diagnosis["id"]
    #                          for diagnosis in diagnosis_list}
    #     final_path = f"catalogs/diagnosis_by_{key_field}.json"
    #     return create_file(
    #         catalog_diagnosis, self.s3_client, final_path=final_path)
    #
    # def build_catalog_area(self):
    #     from data_param.models import DictionaryFile
    #     area_unique = self.name_columns.filter(
    #         final_field__collection__model_name='Area')\
    #         .order_by('-final_field__is_unique').first()
    #     if not area_unique:
    #         return None
    #     dict_file = DictionaryFile.objects.filter(
    #         collection__model_name='Area',
    #         agency=self.agency,
    #         unique_field=area_unique.final_field).first()
    #     if not dict_file:
    #         file_area, errors = self.build_catalog_area_by_id(
    #             area_unique.final_field.name)
    #         if errors:
    #             raise Exception(f"Error al crear el catálogo de Áreas:"
    #                             f" {errors}")
    #         dict_file = DictionaryFile.objects.create(
    #             collection=area_unique.final_field.collection,
    #             unique_field=area_unique.final_field,
    #             agency=self.agency,
    #             file=file_area,
    #         )
    #     return dict_file.file.name
    #
    # def build_catalog_area_by_id(self, key_field):
    #     from geo.models import Area
    #     query_filter = {f"{key_field}__isnull": False, "agency": self.agency}
    #     areas_query = Area.objects.filter(**query_filter)
    #     areas_list = list(areas_query.values("id", key_field))
    #     catalog_area = {area[key_field]: area["id"]
    #                     for area in areas_list}
    #     final_path = f"{self.agency.acronym}/catalogs/area_by_{key_field}.json"
    #     return create_file(
    #         catalog_area, self.s3_client, final_path=final_path)
