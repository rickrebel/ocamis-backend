# Generated by Django 4.1.6 on 2024-03-24 01:06

from django.db import migrations, models
import django.db.models.deletion
import inai.data_file_mixins.explore_mix
import inai.data_file_mixins.get_data_mix
import inai.data_file_mixins.utils_mix
import inai.models
import inai.reply_file_mixins.process_mix
import respond.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data_param', '0011_remove_filecontrol_format_file_and_more'),
        ('inai', '0064_remove_crossingsheet_entity_month_and_more'),
        ('classify_task', '0017_userprofile_is_manager'),
        ('geo', '0014_entity_has_indirect_entity_is_indirect'),
        ('category', '0003_alter_fileformat_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='Behavior',
            fields=[
                ('name', models.CharField(max_length=80, primary_key=True, serialize=False)),
                ('public_name', models.CharField(max_length=80)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=80, null=True)),
                ('color', models.CharField(blank=True, max_length=80, null=True)),
                ('is_merge', models.BooleanField(default=False)),
                ('is_discarded', models.BooleanField(default=False)),
                ('is_valid', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Comportamiento Merge',
                'verbose_name_plural': 'CAT. Comportamientos Merge',
                'db_table': 'inai_behavior',
            },
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=150, upload_to=inai.models.set_upload_path)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('directory', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ruta en archivo comprimido')),
                ('total_rows', models.IntegerField(default=0)),
                ('sheet_names', models.JSONField(blank=True, null=True, verbose_name='Nombres de las hojas')),
                ('filtered_sheets', models.JSONField(blank=True, null=True, verbose_name='Nombres de las hojas filtradas')),
                ('error_process', models.JSONField(blank=True, null=True, verbose_name='Errores de procesamiento')),
                ('warnings', models.JSONField(blank=True, null=True, verbose_name='Advertencias')),
                ('sample_data', models.JSONField(blank=True, null=True, verbose_name='Primeros datos, de exploraci칩n')),
                ('all_results', models.JSONField(blank=True, null=True, verbose_name='Todos los resultados')),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_files', to='geo.entity')),
                ('petition_file_control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_files', to='inai.petitionfilecontrol')),
            ],
            options={
                'verbose_name': 'Archivo con datos',
                'verbose_name_plural': '3. Archivos con datos (DataFile)',
                'db_table': 'inai_datafile',
                'ordering': ['-id'],
            },
            bases=(models.Model, inai.data_file_mixins.explore_mix.ExploreMix, inai.data_file_mixins.utils_mix.DataUtilsMix, inai.data_file_mixins.get_data_mix.ExtractorsMix),
        ),
        migrations.CreateModel(
            name='SheetFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to=inai.models.set_upload_path)),
                ('matched', models.BooleanField(blank=True, null=True)),
                ('sheet_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_data', models.JSONField(blank=True, default=respond.models.default_explore_data, null=True)),
                ('total_rows', models.IntegerField(default=0)),
                ('error_process', models.JSONField(blank=True, null=True)),
                ('warnings', models.JSONField(blank=True, null=True)),
                ('year_month', models.CharField(blank=True, max_length=8, null=True, verbose_name='A침o y mes')),
                ('rx_count', models.IntegerField(default=0, verbose_name='Prescripciones procesadas')),
                ('duplicates_count', models.IntegerField(default=0, verbose_name='Duplicados')),
                ('shared_count', models.IntegerField(default=0, verbose_name='Compartidos')),
                ('behavior', models.ForeignKey(default='pending', on_delete=django.db.models.deletion.CASCADE, to='respond.behavior', verbose_name='merge behavior')),
                ('data_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sheet_files', to='respond.datafile')),
                ('entity_months', models.ManyToManyField(blank=True, related_name='sheet_files', to='inai.entitymonth')),
                ('file_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='category.filetype')),
                ('stage', models.ForeignKey(default='explore', on_delete=django.db.models.deletion.CASCADE, to='classify_task.stage', verbose_name='Etapa actual')),
                ('status', models.ForeignKey(default='finished', on_delete=django.db.models.deletion.CASCADE, to='classify_task.statustask')),
            ],
            options={
                'verbose_name': 'Archivo de pesta침a (csv)',
                'verbose_name_plural': '4. Archivos de pesta침a (Sheets .csv)',
                'db_table': 'inai_sheetfile',
                'ordering': ['id'],
                'unique_together': {('data_file', 'sheet_name', 'file_type')},
            },
        ),
        migrations.CreateModel(
            name='ReplyFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, max_length=150, null=True, upload_to=inai.models.set_upload_path, verbose_name='archivo')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='Texto (en caso de no haber archivo)')),
                ('url_download', models.URLField(blank=True, max_length=400, null=True, verbose_name='Url donde se puede descargar el archivo')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notas')),
                ('addl_params', models.JSONField(blank=True, null=True, verbose_name='Otras configuraciones')),
                ('has_data', models.BooleanField(default=False, verbose_name='Contiene los datos')),
                ('file_type', models.ForeignKey(blank=True, default='no_final_info', null=True, on_delete=django.db.models.deletion.CASCADE, to='category.filetype')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_files', to='inai.petition')),
            ],
            options={
                'verbose_name': 'Archivo sin datos finales',
                'verbose_name_plural': '2. Archivos sin datos finales',
                'db_table': 'inai_replyfile',
            },
            bases=(models.Model, inai.reply_file_mixins.process_mix.ReplyFileMix),
        ),
        migrations.CreateModel(
            name='LapSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lap', models.IntegerField(default=0)),
                ('last_edit', models.DateTimeField(blank=True, null=True)),
                ('inserted', models.BooleanField(blank=True, default=False, null=True)),
                ('cat_inserted', models.BooleanField(blank=True, default=False, null=True)),
                ('missing_inserted', models.BooleanField(blank=True, default=False, null=True)),
                ('general_error', models.CharField(blank=True, max_length=255, null=True)),
                ('total_count', models.IntegerField(default=0)),
                ('processed_count', models.IntegerField(default=0)),
                ('rx_count', models.IntegerField(default=0)),
                ('drugs_count', models.IntegerField(default=0)),
                ('medical_unit_count', models.IntegerField(default=0)),
                ('area_count', models.IntegerField(default=0)),
                ('doctor_count', models.IntegerField(default=0)),
                ('diagnosis_count', models.IntegerField(default=0)),
                ('medicament_count', models.IntegerField(default=0)),
                ('discarded_count', models.IntegerField(default=0)),
                ('missing_rows', models.IntegerField(default=0)),
                ('real_missing_rows', models.IntegerField(default=0)),
                ('missing_fields', models.IntegerField(default=0)),
                ('row_errors', models.JSONField(blank=True, null=True)),
                ('field_errors', models.JSONField(blank=True, null=True)),
                ('valid_insert', models.BooleanField(default=True)),
                ('sheet_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='laps', to='respond.sheetfile')),
            ],
            options={
                'verbose_name': 'Lap de archivo csv',
                'verbose_name_plural': '5. Laps de archivo csv',
                'db_table': 'inai_lapsheet',
                'ordering': ['id'],
                'unique_together': {('sheet_file', 'lap')},
            },
        ),
        migrations.AddField(
            model_name='datafile',
            name='reply_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_file_childs', to='respond.replyfile', verbose_name='archivo base'),
        ),
        migrations.AddField(
            model_name='datafile',
            name='stage',
            field=models.ForeignKey(blank=True, default='initial', null=True, on_delete=django.db.models.deletion.CASCADE, to='classify_task.stage', verbose_name='Etapa actual'),
        ),
        migrations.AddField(
            model_name='datafile',
            name='status',
            field=models.ForeignKey(blank=True, default='finished', null=True, on_delete=django.db.models.deletion.CASCADE, to='classify_task.statustask', verbose_name='Status actual'),
        ),
        migrations.AddField(
            model_name='datafile',
            name='status_process',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='category.statuscontrol'),
        ),
        migrations.CreateModel(
            name='CrossingSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duplicates_count', models.IntegerField(default=0)),
                ('shared_count', models.IntegerField(default=0)),
                ('last_crossing', models.DateTimeField(blank=True, null=True)),
                ('entity_month', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crossing_sheets', to='inai.entitymonth')),
                ('entity_week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crossing_sheets', to='inai.entityweek')),
                ('sheet_file_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crossing_1', to='respond.sheetfile')),
                ('sheet_file_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crossing_2', to='respond.sheetfile')),
            ],
            options={
                'verbose_name': 'Cruce de archivos',
                'verbose_name_plural': '5.1 Cruces de archivos',
                'db_table': 'inai_crossingsheet',
                'get_latest_by': 'month_agency__year_month',
            },
        ),
        migrations.CreateModel(
            name='TableFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to=inai.models.set_upload_path)),
                ('inserted', models.BooleanField(default=False)),
                ('year_week', models.CharField(blank=True, max_length=8, null=True)),
                ('iso_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('iso_week', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('year_month', models.CharField(blank=True, max_length=8, null=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('month', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('is_for_edition', models.BooleanField(default=False)),
                ('drugs_count', models.IntegerField(default=0)),
                ('rx_count', models.IntegerField(default=0)),
                ('duplicates_count', models.IntegerField(default=0)),
                ('shared_count', models.IntegerField(default=0)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.collection')),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='table_files', to='geo.entity')),
                ('entity_week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='table_files', to='inai.entityweek')),
                ('iso_delegation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.delegation')),
                ('lap_sheet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='table_files', to='respond.lapsheet')),
            ],
            options={
                'verbose_name': 'Archivo para insertar',
                'verbose_name_plural': '6. Archivos para insertar',
                'db_table': 'inai_tablefile',
                'ordering': ['-id'],
                'unique_together': {('lap_sheet', 'collection', 'is_for_edition', 'year', 'iso_week', 'iso_delegation')},
            },
        ),
    ]
