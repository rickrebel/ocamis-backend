# Generated by Django 4.1.13 on 2024-07-16 07:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('med_cat', '0001_initial'),
        ('rds', '0001_initial'),
        ('geo', '0001_initial'),
        ('data_param', '0001_initial'),
        ('category', '0001_initial'),
        ('classify_task', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MonthRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_month', models.CharField(max_length=10)),
                ('year', models.SmallIntegerField(blank=True, null=True)),
                ('month', models.SmallIntegerField(blank=True, null=True)),
                ('error_process', models.JSONField(blank=True, null=True)),
                ('drugs_count', models.IntegerField(default=0)),
                ('drugs_in_pre_insertion', models.IntegerField(default=0)),
                ('rx_count', models.IntegerField(default=0)),
                ('duplicates_count', models.IntegerField(default=0)),
                ('shared_count', models.IntegerField(default=0)),
                ('last_transformation', models.DateTimeField(blank=True, null=True)),
                ('last_crossing', models.DateTimeField(blank=True, null=True)),
                ('last_behavior', models.DateTimeField(blank=True, null=True)),
                ('last_merge', models.DateTimeField(blank=True, null=True)),
                ('last_pre_insertion', models.DateTimeField(blank=True, null=True)),
                ('last_validate', models.DateTimeField(blank=True, null=True)),
                ('last_indexing', models.DateTimeField(blank=True, null=True)),
                ('last_insertion', models.DateTimeField(blank=True, null=True)),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='months', to='geo.agency', verbose_name='Sujeto Obligado')),
                ('cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rds.cluster')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='month_records', to='geo.provider', verbose_name='Proveedor de servicios de salud')),
                ('stage', models.ForeignKey(default='init_month', on_delete=django.db.models.deletion.CASCADE, to='classify_task.stage', verbose_name='Etapa actual')),
                ('status', models.ForeignKey(default='finished', on_delete=django.db.models.deletion.CASCADE, to='classify_task.statustask')),
            ],
            options={
                'verbose_name': '8. Mes-proveedor',
                'verbose_name_plural': '8. Meses-proveedores',
                'db_table': 'inai_entitymonth',
                'ordering': ['year_month'],
                'get_latest_by': 'year_month',
            },
        ),
        migrations.CreateModel(
            name='Petition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folio_petition', models.CharField(blank=True, max_length=50, null=True, verbose_name='Folio de la solicitud')),
                ('id_inai_open_data', models.IntegerField(blank=True, null=True, verbose_name='Id en el sistema de INAI')),
                ('description_petition', models.TextField(blank=True, null=True, verbose_name='descripción enviada')),
                ('description_response', models.TextField(blank=True, null=True, verbose_name='Respuesta texto')),
                ('send_petition', models.DateField(blank=True, null=True, verbose_name='Fecha de envío o recepción')),
                ('response_limit', models.DateField(blank=True, null=True, verbose_name='Fecha límite de respuesta')),
                ('send_response', models.DateField(blank=True, null=True, verbose_name='Fecha de última respuesta')),
                ('notes', models.TextField(blank=True, null=True)),
                ('template_text', models.TextField(blank=True, null=True, verbose_name='Texto para la plantilla')),
                ('template_variables', models.JSONField(blank=True, null=True, verbose_name='Variables de la plantilla')),
                ('months_verified', models.BooleanField(default=False, verbose_name='Meses verificados')),
                ('reasons_verified', models.BooleanField(default=False, verbose_name='Razones verificadas')),
                ('reply_files_verified', models.BooleanField(default=False, verbose_name='Archivos de respuesta verificados')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='petitions', to='geo.agency')),
                ('invalid_reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='category.invalidreason', verbose_name='Razón de invalidez')),
                ('month_records', models.ManyToManyField(blank=True, to='inai.monthrecord', verbose_name='Meses de la solicitud')),
                ('real_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='real_petitions', to='geo.provider')),
            ],
            options={
                'verbose_name': 'Solicitud - Petición',
                'verbose_name_plural': '1. Solicitudes (Peticiones)',
            },
        ),
        migrations.CreateModel(
            name='RequestTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True)),
                ('version_name', models.CharField(blank=True, max_length=100, null=True)),
                ('text', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('data_groups', models.ManyToManyField(blank=True, to='data_param.datagroup', verbose_name='Grupos de datos')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='request_templates', to='geo.provider', verbose_name='Proveedor')),
            ],
            options={
                'verbose_name': 'Plantilla de solicitud',
                'verbose_name_plural': 'CAT. Plantillas de solicitud',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(blank=True, max_length=20, null=True)),
                ('variable_type', models.CharField(choices=[('string', 'String'), ('provider', 'By Provider'), ('date', 'Date')], default='string', max_length=15)),
                ('default_value', models.CharField(blank=True, max_length=255, null=True)),
                ('request_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='inai.requesttemplate')),
            ],
            options={
                'verbose_name': 'Variable de plantilla',
                'verbose_name_plural': 'Variables de plantilla',
            },
        ),
        migrations.CreateModel(
            name='WeekRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_week', models.CharField(blank=True, max_length=8, null=True)),
                ('iso_year', models.SmallIntegerField(blank=True, null=True)),
                ('iso_week', models.SmallIntegerField(blank=True, null=True)),
                ('year_month', models.CharField(blank=True, max_length=10, null=True)),
                ('year', models.SmallIntegerField(blank=True, null=True)),
                ('month', models.SmallIntegerField(blank=True, null=True)),
                ('drugs_count', models.IntegerField(default=0)),
                ('rx_count', models.IntegerField(default=0)),
                ('duplicates_count', models.IntegerField(default=0)),
                ('shared_count', models.IntegerField(default=0)),
                ('crosses', models.JSONField(blank=True, null=True)),
                ('last_crossing', models.DateTimeField(blank=True, null=True)),
                ('last_transformation', models.DateTimeField(blank=True, null=True)),
                ('last_merge', models.DateTimeField(blank=True, null=True)),
                ('last_pre_insertion', models.DateTimeField(blank=True, null=True)),
                ('zero', models.IntegerField(blank=True, null=True)),
                ('unknown', models.IntegerField(blank=True, null=True)),
                ('unavailable', models.IntegerField(blank=True, null=True)),
                ('partial', models.IntegerField(blank=True, null=True)),
                ('over_delivered', models.IntegerField(blank=True, null=True)),
                ('error', models.IntegerField(blank=True, null=True)),
                ('denied', models.IntegerField(blank=True, null=True)),
                ('complete', models.IntegerField(blank=True, null=True)),
                ('cancelled', models.IntegerField(blank=True, null=True)),
                ('big_denied', models.IntegerField(blank=True, null=True)),
                ('big_partial', models.IntegerField(blank=True, null=True)),
                ('iso_delegation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.delegation')),
                ('month_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weeks', to='inai.monthrecord')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weeks', to='geo.provider')),
            ],
            options={
                'verbose_name': 'Semana-proveedor',
                'verbose_name_plural': '9. Semanas-proveedores',
                'db_table': 'inai_entityweek',
                'get_latest_by': ['year_month', 'year_week'],
                'unique_together': {('provider', 'year_week', 'iso_delegation', 'year_month')},
            },
        ),
        migrations.CreateModel(
            name='VariableValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255)),
                ('petition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variable_values', to='inai.petition')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variable_values', to='geo.provider')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='inai.variable')),
            ],
            options={
                'verbose_name': 'Valor de variable',
                'verbose_name_plural': 'Valores de variable',
            },
        ),
        migrations.CreateModel(
            name='PetitionNegativeReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(verbose_name='Es la razón principal')),
                ('negative_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='category.negativereason')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='negative_reasons', to='inai.petition')),
            ],
            options={
                'verbose_name': 'Petición - razón negativa (m2m)',
                'verbose_name_plural': 'Peticiones - razones negativas (m2m)',
            },
        ),
        migrations.CreateModel(
            name='PetitionFileControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='petition_file_control', to='data_param.filecontrol')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_controls', to='inai.petition')),
            ],
            options={
                'verbose_name': 'Relacional: petición -- Grupo de Control',
                'verbose_name_plural': '7. Relacional: Petición -- Grupos de Control',
            },
        ),
        migrations.CreateModel(
            name='PetitionDataGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='petitions', to='data_param.datagroup')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_groups', to='inai.petition')),
                ('status_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petition_data_groups_data', to='category.statuscontrol')),
            ],
            options={
                'verbose_name': 'Petición - Grupo de datos (m2m)',
                'verbose_name_plural': 'Peticiones - Grupos de datos (m2m)',
            },
        ),
        migrations.CreateModel(
            name='PetitionBreak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('date_break', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='category.datebreak')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='break_dates', to='inai.petition')),
            ],
            options={
                'verbose_name': 'Petición - fecha de corte (m2m)',
                'verbose_name_plural': 'Peticiones - fechas de corte (m2m)',
            },
        ),
        migrations.AddField(
            model_name='petition',
            name='request_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petitions', to='inai.requesttemplate'),
        ),
        migrations.AddField(
            model_name='petition',
            name='status_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petitions_data', to='category.statuscontrol', verbose_name='Status de los datos entregados'),
        ),
        migrations.AddField(
            model_name='petition',
            name='status_petition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petitions_petition', to='category.statuscontrol', verbose_name='Status de la petición'),
        ),
        migrations.AddField(
            model_name='petition',
            name='status_priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petitions_priority', to='category.statuscontrol', verbose_name='Status de prioridad'),
        ),
        migrations.CreateModel(
            name='DeliveredWeek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('delivered', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weeks', to='med_cat.delivered')),
                ('week_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='inai.weekrecord')),
            ],
            options={
                'verbose_name': 'Clasificación de entrega por semana',
                'verbose_name_plural': 'Clasificaciones de entrega por semana',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folio_complaint', models.CharField(blank=True, max_length=50, null=True, verbose_name='Expediente')),
                ('info_queja_inai', models.JSONField(blank=True, help_text='Información de la queja en INAI Search', null=True, verbose_name='Datos de queja')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Texto de la queja')),
                ('date_complaint', models.DateField(blank=True, null=True, verbose_name='Fecha de envío')),
                ('relevant_data', models.JSONField(blank=True, help_text='Datos relevantes de la queja', null=True, verbose_name='Datos relevantes')),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='inai.petition')),
                ('status_complaint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='category.statuscontrol')),
            ],
            options={
                'verbose_name': 'Queja',
                'verbose_name_plural': '2. Quejas',
            },
        ),
    ]
