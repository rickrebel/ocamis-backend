# Generated by Django 4.1.6 on 2023-04-23 05:43

import data_param.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('category', '0001_initial'),
        ('geo', '0001_initial'),
        ('transparency', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CleanFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('public_name', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('priority', models.SmallIntegerField(default=5, help_text='Nivel de prioridad (ordenación)', verbose_name='Prioridad')),
                ('for_all_data', models.BooleanField(default=False, help_text='Es una transformación para toda la info', verbose_name='Es general')),
                ('addl_params', models.JSONField(blank=True, null=True, verbose_name='Otras configuraciones')),
                ('column_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clean_functions', to='category.columntype', verbose_name='Tipo de columna')),
            ],
            options={
                'verbose_name': 'Función de limpieza y transformación',
                'verbose_name_plural': '2.CAT. Funciones de limpieza y transformación',
                'ordering': ['priority', 'public_name'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del Modelo público (Meta.verbose_name_plural)', max_length=225, verbose_name='verbose_name_plural')),
                ('model_name', models.CharField(max_length=225, verbose_name='Nombre en el código')),
                ('app_label', models.CharField(default='null', max_length=40, verbose_name='App label')),
                ('description', models.TextField(blank=True, null=True)),
                ('open_insertion', models.BooleanField(default=False, verbose_name='Permitir inserción')),
                ('cat_params', models.JSONField(default=dict, verbose_name='Parámetros para catálogo')),
            ],
            options={
                'verbose_name': 'Modelo (Colección)',
                'verbose_name_plural': '1.3 Modelos (Colecciones)',
                'ordering': ['data_group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DataGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=40, null=True, verbose_name='Nombre (devs)')),
                ('public_name', models.CharField(max_length=80, verbose_name='Nombre público')),
                ('is_default', models.BooleanField(default=False)),
                ('color', models.CharField(default='lime', max_length=20)),
                ('can_has_percent', models.BooleanField(default=False, verbose_name='Puede tener porcentajes')),
                ('order', models.IntegerField(default=5)),
            ],
            options={
                'verbose_name': 'Grupo de datos solicitados',
                'verbose_name_plural': '1.1 Grupos de datos solicitados',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('public_name', models.CharField(blank=True, max_length=225, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('addl_params', models.JSONField(default=data_param.models.default_params_data_type, verbose_name='Otras configuraciones')),
                ('is_common', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Tipo de dato',
                'verbose_name_plural': '2.CAT. Tipos de datos',
            },
        ),
        migrations.CreateModel(
            name='FileControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('format_file', models.CharField(blank=True, choices=[('pdf', 'PDF'), ('word', 'Word'), ('xls', 'Excel'), ('txt', 'Texto'), ('csv', 'CSV'), ('email', 'Correo electrónico'), ('other', 'Otro')], max_length=5, null=True)),
                ('other_format', models.CharField(blank=True, max_length=80, null=True)),
                ('final_data', models.BooleanField(blank=True, null=True, verbose_name='Es información final')),
                ('notes', models.TextField(blank=True, null=True)),
                ('row_start_data', models.IntegerField(blank=True, default=1, null=True, verbose_name='# de fila donde inician los datos')),
                ('row_headers', models.IntegerField(blank=True, null=True, verbose_name='# de fila donde se encuentran los encabezados')),
                ('in_percent', models.BooleanField(default=False)),
                ('addl_params', models.JSONField(default=data_param.models.default_addl_params)),
                ('delimiter', models.CharField(blank=True, max_length=3, null=True, verbose_name='Delimitador de columnas')),
                ('decode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Codificación')),
                ('all_results', models.JSONField(blank=True, null=True)),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.agency', verbose_name='Entidad')),
                ('anomalies', models.ManyToManyField(blank=True, to='transparency.anomaly', verbose_name='Anomalías de los datos')),
                ('data_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.datagroup')),
                ('file_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='category.fileformat', verbose_name='formato del archivo')),
                ('status_register', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='category.statuscontrol', verbose_name='Status de los registro de variables')),
            ],
            options={
                'verbose_name': 'Grupo de control de archivos',
                'verbose_name_plural': '3.1 Grupos de control de archivos',
                'db_table': 'data_param_filecontrol',
            },
        ),
        migrations.CreateModel(
            name='FinalField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Nombre del campo en BD')),
                ('verbose_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nombre público')),
                ('addl_params', models.JSONField(blank=True, help_text='Por ejemplo, max_length, null, blank, help_text, django_field, así como otras que aparezcan', null=True, verbose_name='Otras configuraciones')),
                ('variations', models.JSONField(blank=True, help_text='Nombres como pueden venir en las tablas de INAI', null=True, verbose_name='Otros posibles nombres (variaciones)')),
                ('regex_format', models.CharField(blank=True, max_length=255, null=True)),
                ('is_required', models.BooleanField(default=False, verbose_name='Es indispensable para registrar fila')),
                ('included_code', models.CharField(choices=[('complete', 'Completo'), ('complement', 'Complementario'), ('wait', 'En espera de inclusión; pausar'), ('invalid', 'No válido, debe revisarse')], default='complement', max_length=12, verbose_name='valid')),
                ('is_unique', models.BooleanField(default=False, help_text='Puede ser una llave única', verbose_name='Único')),
                ('match_use', models.CharField(blank=True, choices=[('as_unique', 'Como único'), ('in_list', 'En la lista'), ('alternatives', 'Nombres alternativos')], help_text='Uso en el match con catálogos', max_length=16, null=True)),
                ('in_data_base', models.BooleanField(default=False, help_text='Ya está en la base de datos comprobado', verbose_name='En DB')),
                ('verified', models.BooleanField(default=False, help_text='Ricardo ya verificó que todos los parámetros están bien', verbose_name='Verificado')),
                ('is_common', models.BooleanField(default=False, verbose_name='Común')),
                ('dashboard_hide', models.BooleanField(default=False, help_text='Ocultar en el dashboard (es complementaria o equivalente)', verbose_name='Oculta en dashboard')),
                ('need_for_viz', models.BooleanField(default=False, help_text='Se utiliza en indicadores de transparencia', verbose_name='Data viz')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.collection')),
                ('data_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.datatype')),
            ],
            options={
                'verbose_name': 'Campo final',
                'verbose_name_plural': '1.4 Campos finales (DB)',
                'ordering': ['parameter_group', '-is_common', 'verbose_name'],
            },
        ),
        migrations.CreateModel(
            name='NameColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_in_data', models.TextField(blank=True, null=True, verbose_name='Nombre de la columna real')),
                ('position_in_data', models.IntegerField(blank=True, null=True, verbose_name='idx')),
                ('alternative_names', models.JSONField(blank=True, null=True, verbose_name='Nombres alternativos')),
                ('required_row', models.BooleanField(default=False)),
                ('seq', models.IntegerField(blank=True, help_text='Número consecutivo para ordenación en dashboard', null=True, verbose_name='order')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('child_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrens', to='data_param.namecolumn', verbose_name='Hijo resultado (junto a otras columnas)')),
                ('column_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='category.columntype')),
                ('data_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.datatype')),
                ('file_control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='data_param.filecontrol')),
                ('final_field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='name_columns', to='data_param.finalfield')),
                ('parent_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='data_param.namecolumn', verbose_name='Columna padre de la que derivó')),
            ],
            options={
                'verbose_name': 'Nombre de Columna',
                'verbose_name_plural': '3.2 Nombres de Columnas',
                'db_table': 'data_param_namecolumn',
                'ordering': ['seq'],
            },
        ),
        migrations.CreateModel(
            name='Transformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addl_params', models.JSONField(blank=True, default=data_param.models.default_params, null=True)),
                ('clean_function', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.cleanfunction', verbose_name='Función de limpieza o transformación')),
                ('file_control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='file_transformations', to='data_param.filecontrol', verbose_name='Grupo de control')),
                ('name_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='column_transformations', to='data_param.namecolumn', verbose_name='Columna')),
            ],
            options={
                'verbose_name': 'Transformación a aplicar',
                'verbose_name_plural': '4.1 Transformaciones a aplicar',
                'db_table': 'data_param_transformation',
            },
        ),
        migrations.CreateModel(
            name='ParameterGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True, null=True)),
                ('data_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.datagroup')),
            ],
            options={
                'verbose_name': 'Agrupación de campos finales',
                'verbose_name_plural': '1.2 Agrupaciones de campos finales',
            },
        ),
        migrations.AddField(
            model_name='finalfield',
            name='parameter_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.parametergroup'),
        ),
        migrations.CreateModel(
            name='DictionaryFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='dictionary_files')),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.collection')),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.entity')),
                ('file_control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.filecontrol')),
                ('final_fields', models.ManyToManyField(blank=True, related_name='m2m_dictionary_files', to='data_param.finalfield', verbose_name='Campos finales')),
                ('unique_field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dictionary_files', to='data_param.finalfield')),
            ],
            options={
                'verbose_name': 'Catálogo para match',
                'verbose_name_plural': '4.2 Diccionarios para match',
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='data_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_param.datagroup', verbose_name='Conjunto de datos'),
        ),
        migrations.AddField(
            model_name='cleanfunction',
            name='restricted_field',
            field=models.ForeignKey(blank=True, help_text='Campo o variable al cual solo puede aplicarse', null=True, on_delete=django.db.models.deletion.CASCADE, to='data_param.finalfield', verbose_name='Campo exclusivo'),
        ),
    ]
