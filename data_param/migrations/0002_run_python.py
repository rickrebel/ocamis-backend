# Generated by Django 4.1.13 on 2024-07-16 08:11

from django.db import migrations


def standardize_name(apps, schema_editor):
    from scripts.common import text_normalizer
    # from data_param.models import NameColumn
    NameColumn = apps.get_model('data_param', 'NameColumn')
    names_to_update = []
    for name_col in NameColumn.objects.filter(name_in_data__isnull=False):
        std_name_in_data = text_normalizer(name_col.name_in_data, True)
        names_to_update.append(
            NameColumn(id=name_col.id, std_name_in_data=std_name_in_data))
    NameColumn.objects.bulk_update(names_to_update, ['std_name_in_data'])


def copy_old_values(apps, schema_editor):
    OldStatusControl = apps.get_model("category", "OldStatusControl")
    FileControl = apps.get_model("data_param", "FileControl")
    for old_status in OldStatusControl.objects.all():
        FileControl.objects.filter(old_status_register=old_status)\
            .update(status_register=old_status.name)


def create_datagroup(apps, schema_editor):
    OldDataGroup = apps.get_model('data_param', 'OldDataGroup')
    DataGroup = apps.get_model('data_param', 'DataGroup')
    for old_datagroup in OldDataGroup.objects.all():
        DataGroup.objects.create(
            name=old_datagroup.name,
            public_name=old_datagroup.public_name,
            is_default=old_datagroup.is_default,
            color=old_datagroup.color,
            order=old_datagroup.order
        )


def assign_datagroup(apps, schema_editor):
    Collection = apps.get_model('data_param', 'Collection')
    FileControl = apps.get_model('data_param', 'FileControl')
    ParameterGroup = apps.get_model('data_param', 'ParameterGroup')
    DataGroup = apps.get_model('data_param', 'DataGroup')
    for data_group in DataGroup.objects.all():
        Collection.objects.filter(data_group__name=data_group.name)\
            .update(new_data_group=data_group)
        FileControl.objects.filter(data_group__name=data_group.name)\
            .update(new_data_group=data_group)
        ParameterGroup.objects.filter(data_group__name=data_group.name)\
            .update(new_data_group=data_group)


class Migration(migrations.Migration):

    dependencies = [
        ('data_param', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(standardize_name),
        migrations.RunPython(copy_old_values),
        # migrations.RunPython(
        #     create_datagroup, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(
            assign_datagroup, reverse_code=migrations.RunPython.noop),
    ]
